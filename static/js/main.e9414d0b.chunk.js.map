{"version":3,"sources":["components/Navigation/Navigation.js","components/FaceRecognition/FaceRecognition.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/Rank/Rank.js","App.js","serviceWorker.js","index.js","components/Logo/brain1.png"],"names":["Navigation","style","display","justifyContent","className","FaceRecognition","imageUrl","box","id","alt","src","width","height","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","Logo","options","max","pa3","paddingTop","brain","ImageLinkForm","onInputChange","onButtonSubmit","type","onChange","onClick","Rank","app","Clarifai","App","apiKey","particlesOptions","particles","number","value","density","enable","value_area","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","setState","event","input","target","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","console","log","params","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.e9414d0b.chunk.js","sourcesContent":["import React from 'react';\r\nconst Navigation = () =>{\r\n    return (\r\n        <nav style={{display:'flex',justifyContent:'flex-end'}}>\r\n            <p className='f3 link dim black underline pa3 pointer'>Welcome</p>\r\n        </nav>\r\n\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport './FaceRecognition.css';\r\n\r\nconst FaceRecognition = ({imageUrl, box}) =>{\r\n    return (\r\n        <div className='center ma'>\r\n            <div className='absolute mt2'>\r\n            <img id='inputimage' alt='' src={imageUrl} width='500px' height='auto'/>\r\n            <div className='bounding-box' style={{top:box.topRow, right:box.rightCol,bottom:box.bottomRow,left:box.leftCol}}></div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FaceRecognition;","import React from 'react';\r\nimport Tilt from 'react-tilt'\r\nimport brain from './brain1.png';\r\nimport './Logo.css'\r\n\r\nconst Logo = () =>{\r\n    return (\r\n        <div className='ma4 mt0'>\r\n            <Tilt className=\"Tilt br2 shadow-2\" options={{ max : 55 }} style={{ height: 170, width: 150 }} >\r\n <div className=\"Tilt-inner\" pa3=\"true\"> <img style={{paddingTop:'0px'}} alt='logo' src={brain}/> </div>\r\n</Tilt>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport './ImageLinkForm.css';\r\n\r\n\r\nconst ImageLinkForm = ({onInputChange, onButtonSubmit}) =>{\r\n    return (\r\n        <div >\r\n            <p className='f3'>\r\n            {'This Magic Brain will detect faces in your pictures. Get it a try.'}\r\n            </p>\r\n            <div className='center'>\r\n                <div className='form center pa4 br3 shadow-5'>\r\n                  <input className='f4 pa2 w-70 center' type='tex' onChange={onInputChange} />\r\n                  <button className='w-30 grow f4 link ph3 pv3 dib white bg-light-purple'\r\n                  onClick={onButtonSubmit}\r\n                  >Detect</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ImageLinkForm;","import React from 'react';\r\n\r\n\r\n\r\nconst Rank = () =>{\r\n    return (\r\n        <div >\r\n            <div className='white f3'>\r\n                {'By:- Antarpreet Singh'}\r\n\r\n            </div>\r\n            <div className='white f1'>\r\n                {'Face Recognition App'}\r\n                \r\n\r\n            </div>\r\n            \r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Rank ;","import Clarifai from 'clarifai';\nimport React, {Component} from 'react';\nimport Particles from 'react-particles-js';\nimport Navigation from './components/Navigation/Navigation';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport './App.css';\n\nconst app=new Clarifai.App({\n  apiKey:'7189b6032dea4dae98043465413cb14d'\n});\n\nconst particlesOptions= {\n    particles: {\n        number: {\n            value: 200,\n              density: {\n                enable:true,\n              value_area:900\n              \n            }\n        }\n    }\n  }    \n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state={\n      input:'',\n      imageUrl:'',\n      box:{},\n    }\n  }\n  calculateFaceLocation=(data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image= document.getElementById('inputimage');\n    const width= Number(image.width);\n    const height =Number(image.height);\n  \n    return{\n      leftCol:clarifaiFace.left_col*width,\n      topRow:clarifaiFace.top_row*height,\n      rightCol:width-(clarifaiFace.right_col*width),\n      bottomRow: height-(clarifaiFace.bottom_row*height)\n    }\n\n  }\n\n  displayFaceBox=(box)=> {\n    this.setState({box:box})\n  }\n\n  onInputChange =(event)=>{\n    this.setState({input:event.target.value});\n  }\n  onButtonSubmit=() =>{\n    this.setState({imageUrl:this.state.input});\n    app.models\n    .predict(Clarifai.FACE_DETECT_MODEL ,\n      this.state.input)\n      .then(response =>this.displayFaceBox(this.calculateFaceLocation(response)))\n\n    .catch(err=> console.log(err));\n    \n    \n  }\n  render(){\n    return(\n  \n\n\n  \n \n    <div className=\"App\">\n       <Particles className='particles'\n         params={particlesOptions}\n         />\n      <Navigation/>\n      <Logo/>\n      <Rank/>\n      <ImageLinkForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit}/>\n      <FaceRecognition box={this.state.box} imageUrl={this.state.imageUrl}/>\n    </div>\n  );\n}\n}\n\n\nexport default App;\n\n  \n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/brain1.6258c582.png\";"],"sourceRoot":""}